// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: customers.sql

package wood

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO app.customers (customer_name, email, phone, address_line1, suburb, state, postcode, stripe_customer_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING customer_id, customer_name, email, phone, address_line1, address_line2, suburb, state, postcode, country, stripe_customer_id, is_enabled, created_at, updated_at
`

type CreateCustomerParams struct {
	CustomerName     string         `db:"customer_name" json:"customerName"`
	Email            sql.NullString `db:"email" json:"email"`
	Phone            sql.NullString `db:"phone" json:"phone"`
	AddressLine1     sql.NullString `db:"address_line1" json:"addressLine1"`
	Suburb           sql.NullString `db:"suburb" json:"suburb"`
	State            sql.NullString `db:"state" json:"state"`
	Postcode         sql.NullString `db:"postcode" json:"postcode"`
	StripeCustomerID sql.NullString `db:"stripe_customer_id" json:"stripeCustomerId"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (AppCustomer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer,
		arg.CustomerName,
		arg.Email,
		arg.Phone,
		arg.AddressLine1,
		arg.Suburb,
		arg.State,
		arg.Postcode,
		arg.StripeCustomerID,
	)
	var i AppCustomer
	err := row.Scan(
		&i.CustomerID,
		&i.CustomerName,
		&i.Email,
		&i.Phone,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.Suburb,
		&i.State,
		&i.Postcode,
		&i.Country,
		&i.StripeCustomerID,
		&i.IsEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM app.customers WHERE customer_id = $1::uuid
`

func (q *Queries) DeleteCustomer(ctx context.Context, customerID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCustomer, customerID)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT customer_id, customer_name, email, phone, address_line1, address_line2, suburb, state, postcode, country, stripe_customer_id, is_enabled, created_at, updated_at FROM app.customers
WHERE customer_id = $1::uuid
`

func (q *Queries) GetCustomer(ctx context.Context, customerID uuid.UUID) (AppCustomer, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, customerID)
	var i AppCustomer
	err := row.Scan(
		&i.CustomerID,
		&i.CustomerName,
		&i.Email,
		&i.Phone,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.Suburb,
		&i.State,
		&i.Postcode,
		&i.Country,
		&i.StripeCustomerID,
		&i.IsEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT customer_id, customer_name, email, phone, address_line1, address_line2, suburb, state, postcode, country, stripe_customer_id, is_enabled, created_at, updated_at FROM app.customers
ORDER BY customer_name
`

func (q *Queries) ListCustomers(ctx context.Context) ([]AppCustomer, error) {
	rows, err := q.db.QueryContext(ctx, listCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AppCustomer
	for rows.Next() {
		var i AppCustomer
		if err := rows.Scan(
			&i.CustomerID,
			&i.CustomerName,
			&i.Email,
			&i.Phone,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.Suburb,
			&i.State,
			&i.Postcode,
			&i.Country,
			&i.StripeCustomerID,
			&i.IsEnabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE app.customers
SET customer_name = $1,
    email         = $2,
    phone         = $3,
    address_line1 = $4,
    address_line2 = $5,
    suburb        = $6,
    state         = $7,
    postcode      = $8,
    stripe_customer_id = $9,
    is_enabled    = $10
WHERE customer_id = $11::uuid
RETURNING customer_id, customer_name, email, phone, address_line1, address_line2, suburb, state, postcode, country, stripe_customer_id, is_enabled, created_at, updated_at
`

type UpdateCustomerParams struct {
	CustomerName     string         `db:"customer_name" json:"customerName"`
	Email            sql.NullString `db:"email" json:"email"`
	Phone            sql.NullString `db:"phone" json:"phone"`
	AddressLine1     sql.NullString `db:"address_line1" json:"addressLine1"`
	AddressLine2     sql.NullString `db:"address_line2" json:"addressLine2"`
	Suburb           sql.NullString `db:"suburb" json:"suburb"`
	State            sql.NullString `db:"state" json:"state"`
	Postcode         sql.NullString `db:"postcode" json:"postcode"`
	StripeCustomerID sql.NullString `db:"stripe_customer_id" json:"stripeCustomerId"`
	IsEnabled        bool           `db:"is_enabled" json:"isEnabled"`
	CustomerID       uuid.UUID      `db:"customer_id" json:"customerId"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (AppCustomer, error) {
	row := q.db.QueryRowContext(ctx, updateCustomer,
		arg.CustomerName,
		arg.Email,
		arg.Phone,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.Suburb,
		arg.State,
		arg.Postcode,
		arg.StripeCustomerID,
		arg.IsEnabled,
		arg.CustomerID,
	)
	var i AppCustomer
	err := row.Scan(
		&i.CustomerID,
		&i.CustomerName,
		&i.Email,
		&i.Phone,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.Suburb,
		&i.State,
		&i.Postcode,
		&i.Country,
		&i.StripeCustomerID,
		&i.IsEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
