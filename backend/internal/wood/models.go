// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package wood

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type AppDeliveryStatus string

const (
	AppDeliveryStatusScheduled AppDeliveryStatus = "scheduled"
	AppDeliveryStatusCompleted AppDeliveryStatus = "completed"
	AppDeliveryStatusSkipped   AppDeliveryStatus = "skipped"
	AppDeliveryStatusFailed    AppDeliveryStatus = "failed"
)

func (e *AppDeliveryStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AppDeliveryStatus(s)
	case string:
		*e = AppDeliveryStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AppDeliveryStatus: %T", src)
	}
	return nil
}

type NullAppDeliveryStatus struct {
	AppDeliveryStatus AppDeliveryStatus `json:"appDeliveryStatus"`
	Valid             bool              `json:"valid"` // Valid is true if AppDeliveryStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAppDeliveryStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AppDeliveryStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AppDeliveryStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAppDeliveryStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AppDeliveryStatus), nil
}

type AppPaymentStatus string

const (
	AppPaymentStatusPending  AppPaymentStatus = "pending"
	AppPaymentStatusPaid     AppPaymentStatus = "paid"
	AppPaymentStatusFailed   AppPaymentStatus = "failed"
	AppPaymentStatusRefunded AppPaymentStatus = "refunded"
)

func (e *AppPaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AppPaymentStatus(s)
	case string:
		*e = AppPaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AppPaymentStatus: %T", src)
	}
	return nil
}

type NullAppPaymentStatus struct {
	AppPaymentStatus AppPaymentStatus `json:"appPaymentStatus"`
	Valid            bool             `json:"valid"` // Valid is true if AppPaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAppPaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AppPaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AppPaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAppPaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AppPaymentStatus), nil
}

type AppSubscriptionStatus string

const (
	AppSubscriptionStatusActive   AppSubscriptionStatus = "active"
	AppSubscriptionStatusPaused   AppSubscriptionStatus = "paused"
	AppSubscriptionStatusCanceled AppSubscriptionStatus = "canceled"
)

func (e *AppSubscriptionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AppSubscriptionStatus(s)
	case string:
		*e = AppSubscriptionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AppSubscriptionStatus: %T", src)
	}
	return nil
}

type NullAppSubscriptionStatus struct {
	AppSubscriptionStatus AppSubscriptionStatus `json:"appSubscriptionStatus"`
	Valid                 bool                  `json:"valid"` // Valid is true if AppSubscriptionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAppSubscriptionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AppSubscriptionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AppSubscriptionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAppSubscriptionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AppSubscriptionStatus), nil
}

type AppAdmin struct {
	AdminID        uuid.UUID `db:"admin_id" json:"adminId"`
	Name           string    `db:"name" json:"name"`
	Email          string    `db:"email" json:"email"`
	HashedPassword string    `db:"hashed_password" json:"hashedPassword"`
	Role           string    `db:"role" json:"role"`
	IsEnabled      bool      `db:"is_enabled" json:"isEnabled"`
	CreatedAt      time.Time `db:"created_at" json:"createdAt"`
	UpdatedAt      time.Time `db:"updated_at" json:"updatedAt"`
}

type AppCustomer struct {
	CustomerID       uuid.UUID      `db:"customer_id" json:"customerId"`
	CustomerName     string         `db:"customer_name" json:"customerName"`
	Email            sql.NullString `db:"email" json:"email"`
	Phone            sql.NullString `db:"phone" json:"phone"`
	AddressLine1     sql.NullString `db:"address_line1" json:"addressLine1"`
	AddressLine2     sql.NullString `db:"address_line2" json:"addressLine2"`
	Suburb           sql.NullString `db:"suburb" json:"suburb"`
	State            sql.NullString `db:"state" json:"state"`
	Postcode         sql.NullString `db:"postcode" json:"postcode"`
	Country          sql.NullString `db:"country" json:"country"`
	StripeCustomerID sql.NullString `db:"stripe_customer_id" json:"stripeCustomerId"`
	IsEnabled        bool           `db:"is_enabled" json:"isEnabled"`
	CreatedAt        time.Time      `db:"created_at" json:"createdAt"`
	UpdatedAt        time.Time      `db:"updated_at" json:"updatedAt"`
}

type AppDelivery struct {
	DeliveryID       uuid.UUID         `db:"delivery_id" json:"deliveryId"`
	SubscriptionID   uuid.UUID         `db:"subscription_id" json:"subscriptionId"`
	ScheduledDate    time.Time         `db:"scheduled_date" json:"scheduledDate"`
	DeliveredAt      sql.NullTime      `db:"delivered_at" json:"deliveredAt"`
	Status           AppDeliveryStatus `db:"status" json:"status"`
	QuantityTonnes   sql.NullString    `db:"quantity_tonnes" json:"quantityTonnes"`
	BaseCostCents    sql.NullInt64     `db:"base_cost_cents" json:"baseCostCents"`
	DeliveryHours    sql.NullString    `db:"delivery_hours" json:"deliveryHours"`
	StackingHours    sql.NullString    `db:"stacking_hours" json:"stackingHours"`
	DeliveryFeeCents sql.NullInt64     `db:"delivery_fee_cents" json:"deliveryFeeCents"`
	StackingFeeCents sql.NullInt64     `db:"stacking_fee_cents" json:"stackingFeeCents"`
	TotalCostCents   sql.NullInt64     `db:"total_cost_cents" json:"totalCostCents"`
	Notes            sql.NullString    `db:"notes" json:"notes"`
	CreatedAt        time.Time         `db:"created_at" json:"createdAt"`
	UpdatedAt        time.Time         `db:"updated_at" json:"updatedAt"`
}

type AppPayment struct {
	PaymentID             uuid.UUID        `db:"payment_id" json:"paymentId"`
	SubscriptionID        uuid.UUID        `db:"subscription_id" json:"subscriptionId"`
	DeliveryID            uuid.NullUUID    `db:"delivery_id" json:"deliveryId"`
	AmountCents           int64            `db:"amount_cents" json:"amountCents"`
	Currency              string           `db:"currency" json:"currency"`
	Status                AppPaymentStatus `db:"status" json:"status"`
	StripeInvoiceID       sql.NullString   `db:"stripe_invoice_id" json:"stripeInvoiceId"`
	StripePaymentIntentID sql.NullString   `db:"stripe_payment_intent_id" json:"stripePaymentIntentId"`
	InvoiceDate           sql.NullTime     `db:"invoice_date" json:"invoiceDate"`
	PaidAt                sql.NullTime     `db:"paid_at" json:"paidAt"`
	CreatedAt             time.Time        `db:"created_at" json:"createdAt"`
	UpdatedAt             time.Time        `db:"updated_at" json:"updatedAt"`
}

type AppSubscription struct {
	SubscriptionID       uuid.UUID             `db:"subscription_id" json:"subscriptionId"`
	CustomerID           uuid.UUID             `db:"customer_id" json:"customerId"`
	PlanName             string                `db:"plan_name" json:"planName"`
	QuantityTonnes       string                `db:"quantity_tonnes" json:"quantityTonnes"`
	FlatRateCents        int64                 `db:"flat_rate_cents" json:"flatRateCents"`
	DeliveryMonth        int32                 `db:"delivery_month" json:"deliveryMonth"`
	Status               AppSubscriptionStatus `db:"status" json:"status"`
	NextDeliveryDate     sql.NullTime          `db:"next_delivery_date" json:"nextDeliveryDate"`
	StartDate            time.Time             `db:"start_date" json:"startDate"`
	EndDate              sql.NullTime          `db:"end_date" json:"endDate"`
	StripeSubscriptionID sql.NullString        `db:"stripe_subscription_id" json:"stripeSubscriptionId"`
	Config               json.RawMessage       `db:"config" json:"config"`
	IsEnabled            bool                  `db:"is_enabled" json:"isEnabled"`
	CreatedAt            time.Time             `db:"created_at" json:"createdAt"`
	UpdatedAt            time.Time             `db:"updated_at" json:"updatedAt"`
}
